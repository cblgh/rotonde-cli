#!/usr/bin/env node

var fs = require("fs");
var osenv = require("osenv");
var path = require("path");
var program = require("commander");
var request = require("request");
var util = require("./rotonde-utils.js");

program.option("-u, --url", "show links in feed")
    .parse(process.argv);

var newest = 0; // keeps track of the newest post for further polling
var maxPosts = program.args[0];
if (!maxPosts) {
    maxPosts = 25;
}


function processFeed() {
    util.data()
    .then((rotondeItems) => {
        return new Promise((resolve, reject) => {
            var [rotonde, settings] = rotondeItems;

            var posts = {};
            var counter = 0;

            function handleRequest(counter, name, data) {
                try {
                    posts[name] = JSON.parse(data);
                    // we've processed all of the portals, send the response
                    if (counter == rotonde["portal"].length - 1) {
                        resolve(posts);
                    }
                } catch (err) {
                    console.log(name);
                    console.log(err);
                    reject(err);
                }
            }

            rotonde["portal"].forEach(function(portal) {
                portal = portal.replace(/^https?:\/\//, "").replace(/\/?$/, "");
                request("http://" + portal, function(err, resp, body) {
                    handleRequest(counter++, portal, body);
                });
            });
        });
    }).then((posts) => {
        var timeline = [];
        for (domain in posts) {
            var post = posts[domain];
            post["feed"].forEach((entry) => {
                timeline.push({"info": post["profile"], "entry": entry});
            });
        }
        timeline.sort(compare); // sort feed so that we show the newest posts at the bottom
        // rationale: we want to append new posts when we find them, 
        // and this ordering allows that to look less weird
        timeline = timeline.slice(timeline.length - maxPosts);

        for (var i = 0; i < timeline.length; i++) {
            var post = timeline[i];
            if (parseInt(post["entry"]["time"]) > parseInt(newest)) {
                newest = post["entry"]["time"];
                var output = post["info"]["name"] + ": " + post["entry"]["text"];
                if (program.url && post["entry"]["url"]) {
                    output += " " + post["entry"]["url"];
                }
                console.log(output);
            } 
        }
    });
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function compare(a, b) {
    if (parseInt(a["entry"]["time"]) < parseInt(b["entry"]["time"])) {
        return -1;
    }
    if (parseInt(a["entry"]["time"]) > parseInt(b["entry"]["time"])) {
        return 1;
    }
    return 0;
}

setImmediate(async function poll() {
    processFeed();
    await sleep(60000); // sleep for 60s between polls
    setImmediate(poll);
});
